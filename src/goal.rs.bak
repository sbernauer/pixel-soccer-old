use tokio::io::Result;

use crate::image_helpers;
use image::io::Reader as ImageReader;

pub struct Goal {
    draw_commands: Vec<u8>,

    hitbox_start_x: u16,
    hitbox_start_y: u16,
    hitbox_end_x: u16,
    hitbox_end_y: u16,
}

// Measure the following variables with GIMP
const GOAL_IMAGE_WIDTH: u16 = 338;
const GOAL_IMAGE_HEIGHT: u16 = 600;
const GOAL_WIDTH: u16 = 117;
const GOAL_HEIGHT: u16 = 310;

impl Goal {
    fn new(
        screen_width: u16,
        screen_height: u16,
        image_start_x: u16,
        image_start_y: u16,
        image_end_x: u16,
        image_end_y: u16,
        hitbox_start_x: u16,
        hitbox_start_y: u16,
        hitbox_end_x: u16,
        hitbox_end_y: u16,
        fliph: bool,
    ) -> Self {
        let mut image = ImageReader::open("images/goal_v1_transparent.png")
            .unwrap()
            .decode()
            .unwrap();

        if fliph {
            image = image.fliph();
        }

        assert!(image_end_x < screen_width);
        assert!(image_end_y < screen_height);
        assert!(image_end_x - image_start_x == image.width() as u16);
        assert!(image_end_y - image_start_y == image.height() as u16);
        assert!(hitbox_end_x - hitbox_start_x == GOAL_WIDTH);
        assert!(hitbox_end_y - hitbox_start_y == GOAL_HEIGHT);

        let mut draw_commands = image_helpers::draw_image(&image, image_start_x, image_start_y);
        draw_commands.extend_from_slice(&image_helpers::draw_rect(
            hitbox_start_x,
            hitbox_start_y,
            GOAL_WIDTH,
            GOAL_HEIGHT,
            0xff000000,
        ));

        Goal {
            draw_commands,
            hitbox_start_x,
            hitbox_start_y,
            hitbox_end_x,
            hitbox_end_y,
        }
    }

    pub fn left(screen_width: u16, screen_height: u16) -> Self {
        let image_x = 0;
        let image_y = (screen_height - GOAL_IMAGE_HEIGHT as u16) / 2;
        let hitbox_x = 0;
        let hitbox_y = image_y + (GOAL_IMAGE_HEIGHT - GOAL_HEIGHT) / 2;

        Goal::new(
            screen_width,
            screen_height,
            image_x,
            image_y,
            GOAL_IMAGE_WIDTH,
            image_y + GOAL_IMAGE_HEIGHT,
            hitbox_x,
            hitbox_y,
            hitbox_x + GOAL_WIDTH,
            hitbox_y + GOAL_HEIGHT,
            false,
        )
    }

    pub async fn draw(&self, client: &mut crate::network::Client) -> Result<()> {
        client.write_bytes(&self.draw_commands).await
    }
}
